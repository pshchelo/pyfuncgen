=========
pyFuncGen
=========

Waveform function generator control
***********************************

.. this is a reStructuredText. Use Docutils to convert it to 
   HTML/XML, LaTeX or ODT, or rst2pdf for PDF output. 


This software allows to remotely control a waveform function generator 
and run defined voltage/frequency protocols on it. It mainly targets 
electroformation of giant lipid unilamellar vesicles, but can also be used for 
GUV electrodeformation experiments.

The program is written in Python using pyVISA or pySerial to communicate 
to the device and wxPython for graphical user interface.

Currently supported:

=========== =========    =============
**Company** **Model**    **Interface**
----------- ---------    -------------
Agilent     33220A       VISA
TTI         TGA1230      serial
=========== =========    =============


There are two programs available:

wxfuncgen
    a preferred one, with graphical user interface
agilentgrow
    targeted specifically at Agilent 33220A, this is a much simpler 
    command-line version for older non-Unicode systems, like Windows 2000)

General notes
=============
All values concerning field magnitude (peak-to-peak amplitude and offset) 
are automatically clipped to be in the supported interval of the output field. 
**This allowed interval is taken for the output resistance of 50 Ohm!**

Requirements
============

Running from source
-------------------

- Python
- pyVISA for communicating with devices through VISA interface,
  plus VISA interface drivers (e.g. from Agilent or National Instruments)
- pySerial for communicating with devices through serial interface
- wxPython for graphical interface to the program

Running compiled Windows version
-----------------------------------

- Windows XP or higher for GUI, Windows 2000 or higher for CLI. 
  Program can be compiled for Win9x, see "Supporting Legacy Systems"
- working VISA interface drivers (e.g. from Agilent or National Instruments)
  to communicate with devices through VISA interface

.. raw:: pdf

   PageBreak

wxFuncGen
=========

``wxfuncgen.pyw`` or ``wxfuncgen.exe``
    control the generator manually or execute automatic protocol via 
    graphical user interface.

.. image:: wxFuncGen.png

What you can do with it
-----------------------

- connect to a chosen VISA/Serial device or disconnect from currently connected 
  one
- turn output on or off
- set device's frequency and amplitude (no offset and waveform setting in GUI 
  yet, although already supported by API). Waveform is set to be sine wave, 
  with frequency and peak-to-peak amplitude as provided.
- apply the AC field as a pulse of set duration (from 1 to 1000 ms)
- compose a protocol to be run on the function generator
- save a composed protocol for further use or load an existing protocol
- run the protocol with possibility to pause or abort its execution

Connecting to the device
------------------------
When you start the program it first asks you to choose the device you will be 
working with from the list of supported devices. 
Then it automatically scans your system for ports that might connect to 
your chosen device and populates the devices drop-down list with found ones. 
If the list is empty, make sure that the device is connected and hit "refresh" 
button.
If your device list is composed of 'test device 1' and 'test device 2', 
that means that you have chosen a VISA-based device but you do not have 
a proper VISA implementation installed.

.. TODO: check what values are set when connecting to the device

#. Press "Connect" button to connect to the chosen device. 
   The button will stay pressed and the label will change to "Disconnect". 
   The device will display "manual", dashes instead of time, with amplitude and 
   frequency set on the device prior to connection.
#. When connected, depress "Disconnect" button to disconnect. 
   This will also clear the display of function generator and switch 
   it's output off, but will not change the configured values 
   of frequency and amplitude.

Manual Control
--------------

#. Input desired values for frequency and peak-to-peak amplitude into controls 
   and hit "Apply" button. 
   The function generator will be configured with this values, it's display 
   will show "manual"  as current protocol stage name, dashes instead of time 
   and set values for frequency and field amplitude. 
   The input values will be automatically clipped according to the device's 
   supported range **as for 50 Ohm output load**. 
   The program will also display the amplitude in RMS units for convenience 
   when comparing with multimeter readings.
#. Press the "Output ON" button to turn the output of the function generator on. 
   The button will stay pressed indicating that the output is currently on. 
   To turn output off, depress the button.
#. You can change the values as you please, just do not forget to hit "Apply" 
   button to make them active.
#. To apply an AC pulse, choose the desired duration of the pulse 
   and press "PULSE!" button. The field with the parameters set as 
   described above will be applied for this duration only, after which time 
   the output will be switched off.

Executing the protocol
----------------------
Protocol consists of stages, one line per stage. 
In each stage the field amplitude and frequency vary linearly 
from start to end values within a set amount of time. 
The properties you can set for stage are:

- stage name
    this will be displayed on the device's screen and in the program;
- duration of a stage
    number of minutes the stage must be completed within;
- start amplitude and frequency
   values to begin the stage with;
- end amplitude and frequency
    values to finish the stage with;
- number of steps
    total number of steps to perform the stage with, 
    including start and end values.

The number of steps affects how smoothly will your parameters vary, 
and how frequently will the display of the parameters be updated. 
5 seconds interval is a nice setting to begin with 
(number of steps = time in minutes * 12).

#. Create the protocol - either type it yourself in the protocol grid or load 
   it with the "Load" button. 
   When ready editing/creating you can save the protocol for later use 
   as CSV file by pressing "Save" button.
	
   - Protocol file format: coma-separated values, 
     a default CSV export format of MS Excel.
   - You can add lines to the bottom by pressing the "Add" button
   - You can remove empty lines from the bottom by pressing "Delete" button.

#. When ready, press the "START" button. Most of the interface will 
   be disabled then, and the protocol will commence.

   - Device display and the program will show you the current amplitude and 
     frequency, name of the current stage and time remaining until finishing it. 
     Program will also show you currently active interval of values/displays update.
   - You can press the "PAUSE" button to temporarily stop execution 
     of the protocol. 
     You can also decide whether to leave the output on or off while paused 
     by checking/unchecking corresponding check-box.
   - You can abort execution altogether by pressing "STOP" button. 
     You can also decide whether to leave the output on or off when aborted 
     or finished normally by checking/unchecking corresponding check box.

AgilentGrow
===========

``agilentgrow.py`` or ``agilentgrow.exe``
  simple command-line version, hard-coded for Agilent 33220A function generator.

It allows you to run protocols similar to the wxFuncGen program, 
but with much less possibilities:

- You can not save/load protocols.
- The protocol is assumed to be in the following form:

  #. Growing stage - the frequency is constant and the amplitude is changing 
     linearly from start to end values supplied.
  #. Resting stage - frequency is the same as in the previous (growing) stage, 
     amplitude is constant and equal to the end amplitude of the previous stage.
  #. Detachment stage - amplitude is constant and equal to the one 
     of the previous (resting) stage, and the frequency linearly changes 
     from the value of previous stages to the end value.

- You can however disable some stages by providing 0 as their duration.
- Instead of number of steps you provide an update interval in seconds 
  (default is 5 seconds). 
  This affects how smoothly parameters vary.

Run the program with the -h or --help switch to see all the available options::

    Usage: agilentgrow [-h] [-l] [-u1 U1] [-u2 U2] [-f1 F1] [-f2 F2] [-t1 T1]
                          [-t2 T2] [-t3 T3] [-dt DT]
                          [{test device 1,test device 2}]

    Grow vesicles in 3 stages.

    positional arguments:
      {test device 1,test device 2}
                            Device code to connect with (first found)

    optional arguments:
      -h, --help            show this help message and exit
      -l, --list            List available devices and exit
      -u1 U1                Initial voltage, Vpp (0.1)
      -u2 U2                Final voltage, Vpp (2.5)
      -f1 F1                Main frequency, Hz (500)
      -f2 F2                Detachment frequency, Hz (50)
      -t1 T1                Duration of growing stage, min (30)
      -t2 T2                Duration of resting stage, min (60)
      -t3 T3                Duration of detachment stage, min (30)
      -dt DT                Update interval of values/displays, sec (5)

    (Defaults) are for high salinity.

.. raw:: pdf

   PageBreak

Supporting legacy systems
=========================
Lack of support for Win9x version in compiled CLI version is due to the omission 
of w9xpopen.exe from dependencies. 
Modify setup.py to include this file in the distribution and 
recompile the executable.

Lack of GUI support for Windows 2000 (and earlier) stems from its 
non-Unicode nature. 
If you succeed to install all the dependencies of the source version 
under such system (Python, pyVISA and non-Unicode wxPython), 
than you must be able to run the GUI version and to compile it to 
native Windows executable.

Customization
=============
The program was developed for Agilent Technologies 33220A function generator 
in the first place, and later accommodated for TTI TGA 1230 function generator.
It should be fairly possible to add support for any other 
function generator supporting VISA or serial interface
(or, probably, other interfaces).
Read more in doc-string of ``devices/__init__.py`` file.
